stages:
  - install
  - build
  - test
  - build-push-image
  - scan-image-docker

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
  GIT_DEPTH: "0" 

include:
- template: Security/Dependency-Scanning.gitlab-ci.yml
- template: Security/Container-Scanning.gitlab-ci.yml

default:
  image: node:latest

install_Dependencies:
  stage: install
  script:
    - npm install

build-frontend:
  stage: build
  script:
    - echo "Building frontend application"
    - npm install
    - npm run build

sonarcloud-check:
  stage : test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - master
    - develop

gemnasium-dependency_scanning:
    stage: test
    tags: [ saas-linux-large-amd64 ]
    rules:
        - if: $CI_COMMIT_BRANCH == "master"
        - if: $CI_MERGE_REQUEST_IID

build-image-Frontend: 
  stage: build-push-image
  image: docker:20.10.11-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:20.10.11-dind
  before_script:
    - mkdir -p /root/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /root/.docker/config.json
    - docker login $CI_REGISTRY
  script:
    - echo "Running container scanning job for the Angular App"

container_scanning:
  stage: scan-image-docker
  script:
    - echo "Running container scanning job for the Angular App"
  variables:
    CS_IMAGE: elboukhariyoucef/angularapp:1.0.0


